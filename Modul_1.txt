Первое задание 3-го урока курса "Python-разработчик"
==============================================================================================
Методы, применяемые к спискам (list) (первые пять наиболее используемые - я так думаю!):
Метод                           Что делает
----------------------------------------------------------------------------------------------
list.append(x)                  Добавляет элемент в конец списка
list.remove(x)                  Удаляет первый элемент в списке, имеющий значение x.
                                    ValueError, если такого элемента не существует
list.insert(i, x)               Вставляет на i-ый элемент значение x
list.sort([key=функция])        Сортирует список на основе функции
list.copy()                     Поверхностная копия списка
----------------------------------------------------------------------------------------------
list.extend(L)                  Расширяет список list, добавляя в конец все элементы списка L
list.pop([i])                   Удаляет i-ый элемент и возвращает его.
                                    Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]])  Возвращает положение первого элемента со значением x
                                    (при этом поиск ведется от start до end)
list.count(x)                   Возвращает количество элементов со значением x
list.reverse()                  Разворачивает список
list.clear()                    Очищает список
==============================================================================================
Методы, применяемые к словарям (dict) (первые пять наиболее используемые - я так думаю!):
Метод                           Что делает
----------------------------------------------------------------------------------------------
dict.keys()                     Возвращает ключи в словаре
dict.values()                   Возвращает значения в словаре
dict.items()                    Возвращает пары (ключ, значение)
dict.fromkeys(seq[, value])     Создает словарь с ключами из seq и значением value
dict.get(key[, default])        Возвращает значение ключа, но если его нет,
                                    не бросает исключение, а возвращает default (по умолчанию None)
----------------------------------------------------------------------------------------------
dict.clear()                    Очищает словарь
dict.copy()                     Возвращает копию словаря
dict.pop(key[, default])        Удаляет ключ и возвращает значение. Если ключа нет,
                                    возвращает default (по умолчанию бросает исключение)
dict.popitem()                  Удаляет и возвращает пару (ключ, значение). Если словарь пуст,
                                    бросает исключение KeyError. Помните, что словари неупорядочены
dict.setdefault(key[, default]) Возвращает значение ключа, но если его нет, не бросает исключение,
                                    а создает ключ со значением default (по умолчанию None)
dict.update([other])            Обновляет словарь, добавляя пары (ключ, значение) из other. Существующие
                                    ключи перезаписываются. Возвращает None (не новый словарь!)
==============================================================================================
Методы, применяемые к множествам (set) (первые пять наиболее используемые - я так думаю!):
Метод                           Что делает
----------------------------------------------------------------------------------------------
set.add(elem)                   Добавляет элемент в множество
set.remove(elem)                Удаляет элемент из множества. KeyError, если такого
                                    элемента не существует
set.discard(elem)               Удаляет элемент, если он находится в множестве
set.copy()                      Копия множества
set.intersection(other, ...)    Пересечение множеств set и other
----------------------------------------------------------------------------------------------
set.pop()                       Удаляет первый элемент из множества. Так как множества не упорядочены,
                                    нельзя точно сказать, какой элемент будет первым
set.clear()                     Очистка множества
set.issubset(other)             Все элементы set принадлежат other
set.issuperset(other)           Аналогично (все элементы set принадлежат other)
set.union(other, ...)           Объединение множеств set и other

set.difference(other, ...)      Множество из всех элементов set, не принадлежащие ни одному из other.
set.symmetric_difference(other) Множество из элементов, встречающихся в одном множестве, но
                                    не встречающиеся в обоих
==============================================================================================
Методы, применяемые к строкам (str) (первые пять наиболее используемые - я так думаю!):
Метод                           Что делает
----------------------------------------------------------------------------------------------
S.upper()                       Преобразование строки к верхнему регистру
S.lower()                       Преобразование строки к нижнему регистру
S.strip([chars])                Удаление пробельных символов в начале и в конце строки
S.format(*args, **kwargs)       Форматирование строки
S.capitalize()                  Переводит первый символ строки в верхний регистр, а все остальные в нижний
----------------------------------------------------------------------------------------------
S.join(список)                  Сборка строки из списка с разделителем S
S.center(width, [fill])         Возвращает отцентрованную строку, по краям которой стоит символ fill
                                    (пробел по умолчанию)
S.count(str, [start],[end])     Возвращает количество непересекающихся вхождений подстроки в диапазоне
                                    [начало, конец] (0 и длина строки по умолчанию)
S.expandtabs([tabsize])         Возвращает копию строки, в которой все символы табуляции заменяются
                                    одним или несколькими пробелами, в зависимости от текущего столбца.
                                    Если TabSize не указан, размер табуляции полагается равным 8 пробелам
S.lstrip([chars])               Удаление пробельных символов в начале строки
S.rstrip([chars])               Удаление пробельных символов в конце строки
S.partition(шаблон)             Возвращает кортеж, содержащий часть перед первым шаблоном, сам шаблон,
                                    и часть после шаблона. Если шаблон не найден, возвращается кортеж,
                                    содержащий саму строку, а затем две пустых строки
S.rpartition(sep)               Возвращает кортеж, содержащий часть перед последним шаблоном, сам шаблон,
                                    и часть после шаблона. Если шаблон не найден, возвращается кортеж,
                                    содержащий две пустых строки, а затем саму строку
S.swapcase()                    Переводит символы нижнего регистра в верхний, а верхнего – в нижний
S.title()                       Первую букву каждого слова переводит в верхний регистр, а все
                                    остальные в нижний
S.zfill(width)                  Делает длину строки не меньшей width, по необходимости заполняя
                                    первые символы нулями
S.ljust(width, fillchar=" ")	Делает длину строки не меньшей width, по необходимости заполняя
                                    последние символы символом fillchar
S.rjust(width, fillchar=" ")	Делает длину строки не меньшей width, по необходимости заполняя
                                    первые символы символом fillchar
==============================================================================================
